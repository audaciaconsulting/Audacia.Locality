<#@ template debug="true" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="$(SolutionDir)Audacia.Locality.Web\bin\Debug\netstandard1.2\Audacia.Locality.Web.dll" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Audacia.Locality" #>
<#@ import namespace="Audacia.Locality.Web" #>
<# var geonames = new GeoNamesClient(); #>
<# var countries = Task.Run(async () => await geonames.Countries()).Result; #>
<# var continents = countries.GroupBy(c => c.ContinentCode); #>
namespace Audacia.Locality
{
	public partial class Continent
	{
<# foreach (var continent in continents.OrderBy(c => c.Key)) {  #>
		public static Continent <#= Titlize(continent.First().ContinentName).Replace(" ", string.Empty) #> { get; } = new Continent("<#= continent.First().ContinentName #>", "<#= continent.Key #>")
		{
<# foreach (var country in continent.OrderBy(c => c.Name)) {  #>
			Country.<#= new string(Titlize(country.Name).Where(char.IsLetter).ToArray()) #>,
<# } #>
		};

<# } #>
	}
}

<#+ string Titlize(string source)
{
	var lower = source.ToLower();
    var words = lower.Split(' ')
		.Select(w => w.Substring(0, 1).ToUpper() + w.Substring(1, w.Length - 1));
    
	return string.Join(" ", words);
}
#>